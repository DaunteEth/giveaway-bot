from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
import json
from os import getenv
from dotenv import load_dotenv
from aiogram.utils.keyboard import InlineKeyboardBuilder
from giveaway import is_admin, draw_and_send

load_dotenv()

GIVEAWAY_TITLE = getenv("GIVEAWAY_TITLE", "–†–æ–∑—ã–≥—Ä—ã—à –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—å ¬´–¢–µ–∞—Ç—Ä–∞–ª—å–Ω—ã–π –ë—É–ª—å–≤–∞—Ä¬ª!")
GIVEAWAY_DATE = getenv("GIVEAWAY_DATE", "8 –∏—é–ª—è 2025")
GIVEAWAY_CONDITIONS = getenv("GIVEAWAY_CONDITIONS", "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª @teatr_bulvar , –ø–æ—Å–ª–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å¬ª.")
CHANNEL_USERNAME = getenv("CHANNEL_USERNAME")

PARTICIPANTS_FILE = "participants.json"

router = Router()

def get_join_kb():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üéü –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data="join")]
        ]
    )

def get_subscribe_kb():
    channel_url = f"https://t.me/{CHANNEL_USERNAME.lstrip('@')}"
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üì¢ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª", url=channel_url)],
            [InlineKeyboardButton(text="üéü –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data="join")]
        ]
    )

@router.message(Command("start"))
async def cmd_start(message: Message):
    text = (
        "üé≠ –†–æ–∑—ã–≥—Ä—ã—à –±–∏–ª–µ—Ç–æ–≤ –Ω–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª—å ¬´–¢–µ–∞—Ç—Ä–∞–ª—å–Ω—ã–π –ë—É–ª—å–≤–∞—Ä¬ª!\n"
        f"üìÖ –î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {GIVEAWAY_DATE}\n"
        "üìå –£—Å–ª–æ–≤–∏—è —É—á–∞—Å—Ç–∏—è:\n"
        f"{GIVEAWAY_CONDITIONS}\n\n"
        "üëá –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ:"
    )
    await message.answer(text, reply_markup=get_join_kb())

@router.callback_query(F.data == "join")
async def join_callback(call: types.CallbackQuery, bot):
    user_id = call.from_user.id
    username = call.from_user.username or "-"
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        if member.status not in ("member", "administrator", "creator"):
            raise Exception("not subscribed")
    except Exception:
        await call.message.answer(
            "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –Ω–∞—à–ª–∏ –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª.\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_USERNAME}, –∞ –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å¬ª –µ—â—ë —Ä–∞–∑.",
            reply_markup=get_subscribe_kb()
        )
        await call.answer()
        return
    # –ß—Ç–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    try:
        with open(PARTICIPANTS_FILE, "r", encoding="utf-8") as f:
            participants = json.load(f)
    except Exception:
        participants = []
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
    if any(p["user_id"] == user_id for p in participants):
        await call.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!", show_alert=True)
        return
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    participants.append({"user_id": user_id, "username": username})
    with open(PARTICIPANTS_FILE, "w", encoding="utf-8") as f:
        json.dump(participants, f, ensure_ascii=False, indent=2)
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è
    await call.message.answer(
        "‚úÖ –í—ã –≤—Å—ë —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏, –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!  \n–¢–µ–ø–µ—Ä—å –≤—ã ‚Äî —É—á–∞—Å—Ç–Ω–∏–∫ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ üéâ"
    )
    await call.answer()

@router.message(Command("draw"))
async def cmd_draw(message: Message, bot):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.answer("‚õîÔ∏è –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
        return
    try:
        await draw_and_send(bot)
        await message.answer("‚úÖ –†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω! –ü–æ–±–µ–¥–∏—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–≤–æ–∏ –±–∏–ª–µ—Ç—ã.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {e}")
