import os
import json
import random
import logging
from dotenv import load_dotenv

load_dotenv()

ADMIN_IDS = [int(x) for x in os.getenv("ADMIN_IDS", "").split(",") if x.strip()]
TICKETS_FILE = "tickets.json"
PARTICIPANTS_FILE = "participants.json"
LOG_FILE = "giveaway.log"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format='%(asctime)s %(levelname)s %(message)s',
    encoding='utf-8'
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
def is_admin(user_id: int) -> bool:
    return user_id in ADMIN_IDS

# –í—ã–±–æ—Ä –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –∏ —Ä–∞–∑–¥–∞—á–∞ –±–∏–ª–µ—Ç–æ–≤
async def draw_and_send(bot):
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        with open(PARTICIPANTS_FILE, "r", encoding="utf-8") as f:
            participants = json.load(f)
        # –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–ª–µ—Ç–æ–≤
        with open(TICKETS_FILE, "r", encoding="utf-8") as f:
            tickets = json.load(f)
        if len(participants) < 80:
            msg = f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {len(participants)} (–Ω—É–∂–Ω–æ >= 80)"
            logging.error(msg)
            raise Exception(msg)
        if len(tickets) < 80:
            msg = f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∏–ª–µ—Ç–æ–≤ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {len(tickets)} (–Ω—É–∂–Ω–æ >= 80)"
            logging.error(msg)
            raise Exception(msg)
        # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä 80 –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        winners = random.sample(participants, 80)
        random.shuffle(tickets)
        # –†–∞—Å—Å—ã–ª–∫–∞ –±–∏–ª–µ—Ç–æ–≤
        for winner, ticket in zip(winners, tickets):
            try:
                await bot.send_message(
                    winner["user_id"],
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –±–∏–ª–µ—Ç: {ticket}"
                )
                logging.info(f"–ë–∏–ª–µ—Ç {ticket} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {winner['user_id']} ({winner['username']})")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {winner['user_id']}: {e}")
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        with open("winners.json", "w", encoding="utf-8") as f:
            json.dump([
                {"user_id": w["user_id"], "username": w["username"], "ticket": t}
                for w, t in zip(winners, tickets)
            ], f, ensure_ascii=False, indent=2)
        logging.info("–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ. –ò—Ç–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ winners.json.")
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {e}")
        raise

def simulate_draw():
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 100 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    participants = [
        {"user_id": i, "username": f"user{i}"}
        for i in range(1, 101)
    ]
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 80 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤
    tickets = [f"https://ticket.example.com/{i}" for i in range(1, 81)]
    # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä 80 –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    winners = random.sample(participants, 80)
    random.shuffle(tickets)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    winner_ids = [w["user_id"] for w in winners]
    assert len(winner_ids) == len(set(winner_ids)), "–ï—Å—Ç—å –ø–æ–≤—Ç–æ—Ä—ã —Å—Ä–µ–¥–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π!"
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –±–∏–ª–µ—Ç–æ–≤
    assert len(tickets) == len(set(tickets)), "–ï—Å—Ç—å –ø–æ–≤—Ç–æ—Ä—ã —Å—Ä–µ–¥–∏ –±–∏–ª–µ—Ç–æ–≤!"
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è 1:1
    assert len(winners) == len(tickets) == 80, "–î–ª–∏–Ω–∞ —Å–ø–∏—Å–∫–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!"
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–∞–∂–¥—ã–π –±–∏–ª–µ—Ç –≤—ã–¥–∞–Ω —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–º—É —á–µ–ª–æ–≤–µ–∫—É
    issued = set()
    for w, t in zip(winners, tickets):
        assert t not in issued, f"–ë–∏–ª–µ—Ç {t} –≤—ã–¥–∞–Ω –ø–æ–≤—Ç–æ—Ä–Ω–æ!"
        issued.add(t)
    print("–°–∏–º—É–ª—è—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: 80 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π, 80 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ 1:1.")
